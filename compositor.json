{
  "name": "chrisui/commonmark.js",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "TEST Commonmark compositor",
  "branch": "master",
  "style": {
    "name": "Humanist",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/LightBannerHeader",
      "article": "article/ReaderArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "Athelas, Georgia, serif",
    "heading": {
      "fontWeight": 400,
      "textTransform": "uppercase",
      "letterSpacing": "0.1em"
    },
    "colors": {
      "text": "#121212",
      "background": "#fff",
      "primary": "#ee5544",
      "secondary": "#005499",
      "highlight": "#00bd78",
      "border": "#ddd",
      "muted": "#f3f3f3"
    },
    "layout": {
      "maxWidth": 768
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/chrisui/commonmark.js",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/lystable-commonmark",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "commonmark.js",
      "subhead": "CommonMark parser and renderer in JavaScript",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "commonmark.js: CommonMark parser and renderer in JavaScript",
          "url": null
        },
        {
          "component": "ui/GithubButton",
          "user": "chrisui",
          "repo": "commonmark.js"
        }
      ],
      "text": "v0.23.0"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "\n<p><a href=\"https://travis-ci.org/jgm/commonmark.js\"><img src=\"https://img.shields.io/travis/jgm/commonmark.js/master.svg?style=flat\"></a>\n<a href=\"https://www.npmjs.org/package/commonmark\"><img src=\"https://img.shields.io/npm/v/commonmark.svg?style=flat\"></a></p>\n<p>CommonMark is a rationalized version of Markdown syntax,\nwith a <a href=\"http://spec.commonmark.org\">spec</a> and BSD-licensed reference\nimplementations in C and JavaScript.</p>\n<p>For more information, see <a href=\"http://commonmark.org\">http://commonmark.org</a>.</p>\n<p>This repository contains the JavaScript reference implementation.\nIt provides a library with functions for parsing CommonMark\ndocuments to an abstract syntax tree (AST), manipulating the AST,\nand rendering the document to HTML or to an XML representation of the\nAST.</p>\n<p>To play with this library without installing it, see\nthe live dingus at <a href=\"http://try.commonmark.org/\">http://try.commonmark.org/</a>.</p>\n<h2>Installing</h2>\n<p>You can install the library using <code>npm</code>:</p>\n<pre>npm <span class=\"hljs-keyword\">install</span> commonmark</pre><p>This package includes the commonmark library and a\ncommand-line executable, <code>commonmark</code>.</p>\n<p>For client-side use, you can do <code>make dist</code> to produce\na standalone JavaScript file <code>js/dist/commonmark.js</code>,\nsuitable for linking into a web page, or fetch the latest\nfrom <a href=\"http://spec.commonmark.org/js/commonmark.js\">http://spec.commonmark.org/js/commonmark.js</a>, or\n<code>bower install commonmark</code>.</p>\n<p>To run tests for the JavaScript library:</p>\n<pre>npm <span class=\"hljs-keyword\">install</span> # <span class=\"hljs-keyword\">if</span> needed <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">fetch</span> dependencies\nmake <span class=\"hljs-keyword\">test</span></pre><p>To run benchmarks against some other JavaScript converters:</p>\n<pre><span class=\"hljs-symbol\">npm</span> install <span class=\"hljs-keyword\">benchmark </span>showdown <span class=\"hljs-keyword\">marked </span><span class=\"hljs-keyword\">markdown-it\n</span><span class=\"hljs-symbol\">make</span> <span class=\"hljs-keyword\">bench</span></pre><p>To start an interactive dingus that you can use to try out\nthe library:</p>\n<pre><span class=\"hljs-attribute\">make dingus</span></pre><h2>Usage</h2>\n<p>Instead of converting Markdown directly to HTML, as most converters\ndo, <code>commonmark.js</code> parses Markdown to an AST (abstract syntax tree),\nand then renders this AST as HTML.  This opens up the possibility of\nmanipulating the AST between parsing and rendering.  For example, one\ncould transform emphasis into ALL CAPS.</p>\n<p>Here&apos;s a basic usage example:</p>\n<pre><span class=\"hljs-keyword\">var</span> reader = <span class=\"hljs-keyword\">new</span> commonmark.Parser();\n<span class=\"hljs-keyword\">var</span> writer = <span class=\"hljs-keyword\">new</span> commonmark.HtmlRenderer();\n<span class=\"hljs-keyword\">var</span> parsed = reader.parse(<span class=\"hljs-string\">&quot;Hello *world*&quot;</span>); <span class=\"hljs-comment\">// parsed is a &apos;Node&apos; tree</span>\n<span class=\"hljs-comment\">// transform parsed if you like...</span>\n<span class=\"hljs-keyword\">var</span> result = writer.render(parsed); <span class=\"hljs-comment\">// result is a String</span></pre><p>The constructors for <code>Parser</code> and <code>HtmlRenderer</code> take an optional\n<code>options</code> parameter:</p>\n<pre><span class=\"hljs-keyword\">var</span> writer = <span class=\"hljs-keyword\">new</span> commonmark.HtmlRenderer({<span class=\"hljs-attr\">sourcepos</span>: <span class=\"hljs-literal\">true</span>});</pre><p>The following options are currently supported:</p>\n<ul>\n<li><code>sourcepos</code>:  if <code>true</code>, source position information for block-level\nelements will be rendered in the <code>data-sourcepos</code> attribute (for\nHTML) or the <code>sourcepos</code> attribute (for XML).</li>\n<li><code>smart</code>:  if <code>true</code>, straight quotes will be made curly, <code>--</code> will\nbe changed to an en dash, <code>---</code> will be changed to an em dash, and\n<code>...</code> will be changed to ellipses.</li>\n<li><code>safe</code>: if <code>true</code>, raw HTML will not be passed through to HTML\noutput (it will be replaced by comments), and potentially unsafe\nURLs in links and images (those beginning with <code>javascript:</code>,\n<code>vbscript:</code>, <code>file:</code>, and with a few exceptions <code>data:</code>) will\nbe replaced with empty strings.</li>\n</ul>\n<p>It is also possible to override the <code>escape</code> and <code>softbreak</code>\nproperties of a renderer.  So, to make soft breaks render as hard\nbreaks in HTML:</p>\n<pre><span class=\"hljs-keyword\">var</span> writer = <span class=\"hljs-keyword\">new</span> commonmark.HtmlRenderer;\nwriter.softbreak = <span class=\"hljs-string\">&quot;&lt;br /&gt;&quot;</span>;</pre><p>To make them render as spaces:</p>\n<pre>writer.softbreak = <span class=\"hljs-string\">&quot; &quot;</span>;</pre><p>To override <code>escape</code>, pass it a function with two parameters:\nthe first is the string to be escaped, the second is a boolean\nthat is <code>true</code> if the escaped string is to be included in an\nattribute.</p>\n<p>In addition to the <code>HtmlRenderer</code>, there is an <code>XmlRenderer</code>, which\nwill produce an XML representation of the AST:</p>\n<pre><span class=\"hljs-keyword\">var</span> writer = <span class=\"hljs-keyword\">new</span> commonmark.XmlRenderer({<span class=\"hljs-attr\">sourcepos</span>: <span class=\"hljs-literal\">true</span>});</pre><p>The parser returns a Node.  The following public properties are defined\n(those marked &quot;read-only&quot; have only a getter, not a setter):</p>\n<ul>\n<li><code>type</code> (read-only):  a String, one of\n<code>Text</code>, <code>Softbreak</code>, <code>Hardbreak</code>, <code>Emph</code>, <code>Strong</code>,\n<code>Html</code>, <code>Link</code>, <code>Image</code>, <code>Code</code>, <code>Document</code>, <code>Paragraph</code>,\n<code>BlockQuote</code>, <code>Item</code>, <code>List</code>, <code>Header</code>, <code>CodeBlock</code>,\n<code>HtmlBlock</code> <code>HorizontalRule</code>.</li>\n<li><code>firstChild</code> (read-only):  a Node or null.</li>\n<li><code>lastChild</code> (read-only): a Node or null.</li>\n<li><code>next</code> (read-only): a Node or null.</li>\n<li><code>prev</code> (read-only): a Node or null.</li>\n<li><code>parent</code> (read-only): a Node or null.</li>\n<li><code>sourcepos</code> (read-only): an Array with the following form:\n<code>[[startline, startcolumn], [endline, endcolumn]]</code>.</li>\n<li><code>isContainer</code> (read-only): <code>true</code> if the Node can contain other\n Nodes as children.</li>\n<li><code>literal</code>: the literal String content of the node or null.</li>\n<li><code>destination</code>: link or image destination (String) or null.</li>\n<li><code>title</code>: link or image title (String) or null.</li>\n<li><code>info</code>: fenced code block info string (String) or null.</li>\n<li><code>level</code>: header level (Number).</li>\n<li><code>listType</code>: a String, either <code>Bullet</code> or <code>Ordered</code>.</li>\n<li><code>listTight</code>: <code>true</code> if list is tight.</li>\n<li><code>listStart</code>: a Number, the starting number of an ordered list.</li>\n<li><code>listDelimiter</code>: a String, either <code>)</code> or <code>.</code> for an ordered list.</li>\n</ul>\n<p>Nodes have the following public methods:</p>\n<ul>\n<li><code>appendChild(child)</code>:  Append a Node <code>child</code> to the end of the\nNode&apos;s children.</li>\n<li><code>prependChild(child)</code>:  Prepend a Node <code>child</code> to the end of the\nNode&apos;s children.</li>\n<li><code>unlink()</code>:  Remove the Node from the tree, severing its links\nwith siblings and parents, and closing up gaps as needed.</li>\n<li><code>insertAfter(sibling)</code>: Insert a Node <code>sibling</code> after the Node.</li>\n<li><code>insertBefore(sibling)</code>: Insert a Node <code>sibling</code> before the Node.</li>\n<li><code>walker()</code>: Returns a NodeWalker that can be used to iterate through\nthe Node tree rooted in the Node.</li>\n</ul>\n<p>The NodeWalker returned by <code>walker()</code> has two methods:</p>\n<ul>\n<li><code>next()</code>: Returns an object with properties <code>entering</code> (a boolean,\nwhich is <code>true</code> when we enter a Node from a parent or sibling, and\n<code>false</code> when we reenter it from a child).  Returns <code>null</code> when\nwe have finished walking the tree.</li>\n<li><code>resumeAt(node, entering)</code>: Resets the iterator to resume at the\nspecified node and setting for <code>entering</code>.  (Normally this isn&apos;t\nneeded unless you do destructive updates to the Node tree.)</li>\n</ul>\n<p>Here is an example of the use of a NodeWalker to iterate through\nthe tree, making transformations.  This simple example converts\nthe contents of all <code>Text</code> nodes to ALL CAPS:</p>\n<pre><span class=\"hljs-keyword\">var</span> walker = parsed.walker();\n<span class=\"hljs-keyword\">var</span> event, node;\n\n<span class=\"hljs-keyword\">while</span> ((event = walker.next())) {\n  node = event.node;\n  <span class=\"hljs-keyword\">if</span> (event.entering &amp;&amp; node.type === <span class=\"hljs-string\">&apos;Text&apos;</span>) {\n    node.literal = node.literal.toUpperCase();\n  }\n}</pre><p>This more complex example converts emphasis to ALL CAPS:</p>\n<pre><span class=\"hljs-keyword\">var</span> walker = parsed.walker();\n<span class=\"hljs-keyword\">var</span> event, node;\n<span class=\"hljs-keyword\">var</span> inEmph = <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-keyword\">while</span> ((event = walker.next())) {\n  node = event.node;\n  <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-string\">&apos;Emph&apos;</span>) {\n    <span class=\"hljs-keyword\">if</span> (event.entering) {\n      inEmph = <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      inEmph = <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-comment\">// add Emph node&apos;s children as siblings</span>\n      <span class=\"hljs-keyword\">while</span> (node.firstChild) {\n        node.insertBefore(node.firstChild);\n      }\n      <span class=\"hljs-comment\">// remove the empty Emph node</span>\n      node.unlink()\n    }\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (inEmph &amp;&amp; node.type === <span class=\"hljs-string\">&apos;Text&apos;</span>) {\n      node.literal = node.literal.toUpperCase();\n  }\n}</pre><p>Exercises for the reader:  write a transform to</p>\n<ol>\n<li>De-linkify a document, transforming links to regular text.</li>\n<li>Remove all raw HTML (<code>Html</code> and <code>HtmlBlock</code> nodes).</li>\n<li>Run fenced code blocks marked with a language name through\na syntax highlighting library, replacing them with an <code>HtmlBlock</code>\ncontaining the highlighted code.</li>\n<li>Print warnings to the console for images without image\ndescriptions or titles.</li>\n</ol>\n<h2>A note on security</h2>\n<p>The library does not attempt to sanitize link attributes or\nraw HTML.  If you use this library in applications that accept\nuntrusted user input, you should either enable the <code>safe</code> option\n(see above) or run the output through an HTML sanitizer to protect against\n<a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">XSS attacks</a>.</p>\n<h2>Performance</h2>\n<p>Performance is excellent, roughly on par with <code>marked</code>.  On a benchmark\nconverting an 11 MB Markdown file built by concatenating the Markdown\nsources of all localizations of the first edition of\n<a href=\"https://github.com/progit/progit/tree/master/en\"><em>Pro Git</em></a> by Scott\nChacon, the command-line tool, <code>commonmark</code> is just a bit slower than\nthe C program <code>discount</code>, roughly ten times faster than PHP Markdown,\na hundred times faster than Python Markdown, and more than\na thousand times faster than <code>Markdown.pl</code>.</p>\n<p>Here are some focused benchmarks of four JavaScript libraries\n(using versions available on 24 Jan 2015). They test performance\non different kinds of Markdown texts.  (Most of these samples\nare taken from the\n<a href=\"https://github.com/markdown-it/markdown-it\">markdown-it</a>\nrepository.)  Results show a ratio of ops/second (higher is better)\nagainst showdown (which is usually the slowest implementation).\nVersions:  commonmark.js 0.21.0, markdown-it 4.3.0,\nshowdown 1.2.0, marked 0.3.3, with node 0.10.25.</p>\n<table>\n<thead>\n<tr>\n<th>Sample</th>\n<th>showdown</th>\n<th>commonmark</th>\n<th>marked</th>\n<th>markdown-it</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"bench/samples/block-bq-flat.md\">block-bq-flat.md</a></td>\n<td>1</td>\n<td>4.2</td>\n<td>4.9</td>\n<td>4.9</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-bq-nested.md\">block-bq-nested.md</a></td>\n<td>1</td>\n<td>10.0</td>\n<td>7.6</td>\n<td>11.1</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-code.md\">block-code.md</a></td>\n<td>1</td>\n<td>3.8</td>\n<td>10.0</td>\n<td>14.5</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-fences.md\">block-fences.md</a></td>\n<td>1</td>\n<td>6.0</td>\n<td>16.5</td>\n<td>14.3</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-heading.md\">block-heading.md</a></td>\n<td>1</td>\n<td>3.9</td>\n<td>4.6</td>\n<td>5.5</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-hr.md\">block-hr.md</a></td>\n<td>1</td>\n<td>2.6</td>\n<td>3.0</td>\n<td>3.8</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-html.md\">block-html.md</a></td>\n<td>1</td>\n<td>1.7</td>\n<td>0.8</td>\n<td>3.9</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-lheading.md\">block-lheading.md</a></td>\n<td>1</td>\n<td>3.6</td>\n<td>4.6</td>\n<td>3.1</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-list-flat.md\">block-list-flat.md</a></td>\n<td>1</td>\n<td>4.3</td>\n<td>4.6</td>\n<td>6.5</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-list-nested.md\">block-list-nested.md</a></td>\n<td>1</td>\n<td>7.1</td>\n<td>6.1</td>\n<td>13.2</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-ref-flat.md\">block-ref-flat.md</a></td>\n<td>1</td>\n<td>0.6</td>\n<td>0.4</td>\n<td>0.5</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/block-ref-nested.md\">block-ref-nested.md</a></td>\n<td>1</td>\n<td>0.5</td>\n<td>0.5</td>\n<td>0.7</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-autolink.md\">inline-autolink.md</a></td>\n<td>1</td>\n<td>2.0</td>\n<td>3.4</td>\n<td>2.5</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-backticks.md\">inline-backticks.md</a></td>\n<td>1</td>\n<td>5.6</td>\n<td>4.6</td>\n<td>7.9</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-em-flat.md\">inline-em-flat.md</a></td>\n<td>1</td>\n<td>1.0</td>\n<td>1.0</td>\n<td>1.5</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-em-nested.md\">inline-em-nested.md</a></td>\n<td>1</td>\n<td>1.2</td>\n<td>1.2</td>\n<td>1.4</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-em-worst.md\">inline-em-worst.md</a></td>\n<td>1</td>\n<td>1.5</td>\n<td>1.3</td>\n<td>0.9</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-entity.md\">inline-entity.md</a></td>\n<td>1</td>\n<td>1.0</td>\n<td>3.7</td>\n<td>2.5</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-escape.md\">inline-escape.md</a></td>\n<td>1</td>\n<td>2.0</td>\n<td>1.3</td>\n<td>4.3</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-html.md\">inline-html.md</a></td>\n<td>1</td>\n<td>2.0</td>\n<td>3.7</td>\n<td>3.0</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-links-flat.md\">inline-links-flat.md</a></td>\n<td>1</td>\n<td>2.4</td>\n<td>2.5</td>\n<td>2.4</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-links-nested.md\">inline-links-nested.md</a></td>\n<td>1</td>\n<td>1.8</td>\n<td>0.5</td>\n<td>0.3</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/inline-newlines.md\">inline-newlines.md</a></td>\n<td>1</td>\n<td>1.8</td>\n<td>1.8</td>\n<td>2.4</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/lorem1.md\">lorem1.md</a></td>\n<td>1</td>\n<td>6.3</td>\n<td>3.4</td>\n<td>3.6</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/rawtabs.md\">rawtabs.md</a></td>\n<td>1</td>\n<td>4.3</td>\n<td>4.2</td>\n<td>4.9</td>\n</tr>\n<tr>\n<td><a href=\"bench/samples/README.md\">README.md</a></td>\n<td>1</td>\n<td>3.6</td>\n<td>3.3</td>\n<td>4.1</td>\n</tr>\n</tbody>\n</table>\n<p>To generate this table,</p>\n<pre><span class=\"hljs-symbol\">npm</span> install showdown <span class=\"hljs-keyword\">marked </span><span class=\"hljs-keyword\">markdown-it </span><span class=\"hljs-keyword\">benchmark\n</span><span class=\"hljs-symbol\">make</span> <span class=\"hljs-keyword\">bench-detailed</span></pre><h2>Authors</h2>\n<p>John MacFarlane wrote the first version of the JavaScript\nimplementation.  The block parsing algorithm was worked out together\nwith David Greenspan.  K&#x101;rlis Ga&#x146;&#x123;is helped work out a better parsing\nalgorithm for links and emphasis, eliminating several worst-case\nperformance issues.  Vitaly Puzrin has offered much good advice\nabout optimization and other issues.</p>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/chrisui/commonmark.js",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/chrisui",
          "text": "chrisui"
        }
      ]
    }
  ]
}